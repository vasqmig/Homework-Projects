{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\max_v\\\\Documents\\\\Springboard work\\\\Homework-Projects\\\\my-app-deck-of-cards\\\\src\\\\Deck.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\nimport axios from \"axios\";\nimport \"./Deck.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = \"https://deckofcardsapi.com/api/deck\";\nfunction Deck() {\n  _s();\n  const [deck, setDeck] = useState(null);\n  const [drawn, setDrawn] = useState([]);\n  const [isShuffling, setIsShuffling] = useState(false);\n  useEffect(function loadDeckFromAPI() {\n    async function fetchData() {\n      const d = await axios.get(`${API_BASE_URL}/new/shuffle/`);\n      setDeck(d.data);\n    }\n    fetchData();\n  });\n  async function draw() {\n    try {\n      const drawRes = await axios.get(`${API_BASE_URL}/${deck.deck_id}/draw/`);\n      if (drawRes.data.remaining === 0) throw new Error(\"Deck Empty!!\");\n      const card = drawRes.data.cards[0];\n      setDrawn(d => [...d, {\n        id: card.code,\n        name: card.suit + \" \" + card.value,\n        image: card.image\n      }]);\n    } catch (err) {\n      alert(err);\n    }\n  }\n  async function startShuffling() {\n    setIsShuffling(true);\n    try {\n      await axios.get(`${API_BASE_URL}/${deck.deck_id}/shuffle/`);\n      setDrawn([]);\n    } catch (err) {\n      alert(err);\n    } finally {\n      setIsShuffling(false);\n    }\n  }\n  function renderDrawBtnIfOk() {\n    if (!deck) return null;\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"New-Deck\",\n      onClick: draw,\n      disabled: isShuffling,\n      children: \"DRAW\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n  function renderShuffleBtnIfOk() {\n    if (!deck) return null;\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"New-Deck\",\n      onClick: startShuffling,\n      disabled: isShuffling,\n      children: \"SHUFFLE DECK\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"Deck\",\n    children: [renderDrawBtnIfOk(), renderShuffleBtnIfOk(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Deck-cardarea\",\n      children: drawn.map(c => /*#__PURE__*/_jsxDEV(Card, {\n        name: c.name,\n        image: c.image\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n_s(Deck, \"DgxouipH3bdN4B0nzH9VFtzhfsg=\");\n_c = Deck;\nexport default Deck;\nvar _c;\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"names":["React","useEffect","useState","Card","axios","jsxDEV","_jsxDEV","API_BASE_URL","Deck","_s","deck","setDeck","drawn","setDrawn","isShuffling","setIsShuffling","loadDeckFromAPI","fetchData","d","get","data","draw","drawRes","deck_id","remaining","Error","card","cards","id","code","name","suit","value","image","err","alert","startShuffling","renderDrawBtnIfOk","className","onClick","disabled","children","fileName","_jsxFileName","lineNumber","columnNumber","renderShuffleBtnIfOk","map","c","_c","$RefreshReg$"],"sources":["C:/Users/max_v/Documents/Springboard work/Homework-Projects/my-app-deck-of-cards/src/Deck.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport Card from \"./Card\";\r\nimport axios from \"axios\";\r\nimport \"./Deck.css\";\r\n\r\n\r\nconst API_BASE_URL = \"https://deckofcardsapi.com/api/deck\";\r\n\r\nfunction Deck() {\r\n    const [deck, setDeck] = useState(null);\r\n    const [ drawn, setDrawn] = useState([]);\r\n    const [isShuffling, setIsShuffling] = useState(false);\r\n\r\n    useEffect(function loadDeckFromAPI(){\r\n        async function fetchData(){\r\n            const d = await axios.get(`${API_BASE_URL}/new/shuffle/`);\r\n            setDeck(d.data);\r\n        }\r\n        fetchData();\r\n    });\r\n    async function draw(){\r\n        try {\r\n            const drawRes = await axios.get(`${API_BASE_URL}/${deck.deck_id}/draw/`);\r\n            if (drawRes.data.remaining === 0) throw new Error(\"Deck Empty!!\");\r\n            const card = drawRes.data.cards[0];\r\n\r\n            setDrawn(d=>[\r\n                ...d,\r\n                {\r\n                    id: card.code,\r\n                    name: card.suit + \" \" + card.value,\r\n                    image: card.image,\r\n                },\r\n            ]);\r\n        } catch (err){\r\n            alert(err);\r\n        }\r\n    }\r\n    async function startShuffling() {\r\n        setIsShuffling(true);\r\n        try {\r\n            await axios.get(`${API_BASE_URL}/${deck.deck_id}/shuffle/`);\r\n            setDrawn([]);\r\n        }catch(err){\r\n            alert(err);\r\n        }finally {\r\n            setIsShuffling(false);\r\n        }\r\n    }\r\n\r\n    function renderDrawBtnIfOk(){\r\n        if (!deck) return null;\r\n        return (\r\n            <button\r\n            className=\"New-Deck\"\r\n            onClick={draw}\r\n            disabled={isShuffling}>\r\n                DRAW\r\n            </button>\r\n        );\r\n    }\r\n\r\n    function renderShuffleBtnIfOk() {\r\n        if (!deck) return null;\r\n        return(\r\n            <button\r\n            className=\"New-Deck\"\r\n            onClick={startShuffling}\r\n            disabled = {isShuffling}>\r\n                SHUFFLE DECK\r\n            </button>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <main className=\"Deck\">\r\n            {renderDrawBtnIfOk()}\r\n            {renderShuffleBtnIfOk()}\r\n\r\n            <div className=\"Deck-cardarea\">{\r\n            drawn.map(c => (\r\n                <Card \r\n                key={c.id} \r\n                name={c.name}\r\n                image = {c.image}\r\n                />\r\n            ))}\r\n                </div>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Deck;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}